# -*- coding: utf-8 -*-
"""Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eRi5wmK96E0md1X49o7ntQ8cHtu7pJZ4
"""

import os
if 'COLAB_TPU_ADDR' not in os.environ: 
  print('Not connected to TPU') 
else: 
  print("Connected to TPU")

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io
train = pd.read_csv(io.StringIO(uploaded['1.csv'].decode('utf-8')))
#print(df)
#print(df.head(4))

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

#uploaded
# To determine which version you're using:
#!pip show tensorflow

# For the current version: 
#!pip install --upgrade tensorflow

import numpy as np
import pandas as pd
import requests
import os

dress_patterns_df = pd.read_csv('1.csv')
dress_patterns = dress_patterns_df .values

# category
category = set(dress_patterns_df['category'])
print(category)

#create a folder dataset and nested folder of category
print(os.listdir())
os.mkdir('dataset_category')

for cat in category:
    print(cat)
    os.mkdir('dataset_category/'+cat)

print(os.listdir('dataset_category'))

# save image in respective category folder.

for i in range(len(dress_patterns)):
  if i%5 == 0:
    print(i, '/', len(dress_patterns))
  pattern = dress_patterns[i]
  url = pattern[3]
  unit_id = pattern[0]
  category = pattern[1]
  try:
    r = requests.get(url, allow_redirects=True)
    open('dataset_category/'+category+'/'+str(unit_id)+'.jpg', 'wb').write(r.content)
  except:
    print('ERROR at: ', i)

# Importing the Keras libraries and packages
import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

dress_patterns_df = pd.read_csv('1.csv')
dress_patterns = dress_patterns_df.values
dress_patterns_df.head()

print(os.listdir('dataset_category'))
print(os.listdir('dataset_category/animal'))

classifier = Sequential()

classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))

classifier.add(MaxPooling2D(pool_size = (2, 2)))

classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

classifier.add(Flatten())

classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 17, activation = 'softmax'))


classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
#classifier.summary()

# Part 2 - Fitting the CNN to the images

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('dataset_category',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

classifier.fit_generator(training_set,
                         steps_per_epoch = 80,
                         epochs = 5)

# Save Model to Disk
# serialize model to JSON
model_json = classifier.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
# serialize weights to HDF5
classifier.save_weights("model.h5")
print("Saved model to disk")

os.listdir('dataset_category/floral')

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('dataset_category/floral/851514376.jpg', target_size = (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
training_set.class_indices

index = np.where(result[0] == 1)[0][0]
predicted_category = list(training_set.class_indices.keys())[list(training_set.class_indices.values()).index(index)]
predicted_category

path = 'dataset_category/'+ predicted_category+'/'
extension = '*.jpg'
path+extension

result = [i for i in glob.glob(path+extension)]
len(result)

result[0]

img = cv2.imread(result[0])

plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

images = result[1:10]
from matplotlib.pyplot import figure
figure(num=None, figsize=(16, 8), dpi=180, facecolor='w', edgecolor='k')
for i, image in enumerate(images, start=1):
    image_array = cv2.imread(image)
    
    image_array = cv2.cvtColor(image_array, cv2.COLOR_BGR2RGB)
    plt.subplot(330+i)
    plt.axis('off')
    plt.imshow(image_array, cmap=plt.get_cmap('gray'))

plt.show()